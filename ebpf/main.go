// go:build linux

package main

import (
	"bytes"
	"encoding/binary"
	"errors"
	"log"
	"os"
	"os/signal"
	"syscall"

	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/ringbuf"
	"github.com/cilium/ebpf/rlimit"
	"golang.org/x/sys/unix"
)

//go:generate go run github.com/cilium/ebpf/cmd/bpf2go -tags linux -type trace_info -go-package=main -target amd64 bpf nftrace.c -- -I.

type (
	Verdict     int32
	FamilyTable int32
	TraceType   uint32
)

// func (v Verdict) String() (str string) {
// 	switch v {
// 	case unix.NFT_CONTINUE:
// 		str = "continue"
// 	case unix.NFT_BREAK:
// 		str = "break"
// 	case unix.NFT_JUMP:
// 		str = "jump"
// 	case unix.NFT_GOTO:
// 		str = "goto"
// 	case unix.NFT_RETURN:
// 		str = "return"
// 	}
// 	return str
// }
/* Responses from hook functions. */
const (
	NF_DROP        = 0
	NF_ACCEPT      = 1
	NF_STOLEN      = 2
	NF_QUEUE       = 3
	NF_REPEAT      = 4
	NF_STOP        = 5 /* Deprecated, for userspace nf_queue compatibility. */
	NF_MAX_VERDICT = NF_STOP
)

func (v Verdict) String() string {
	switch v { //nolint:gosec
	case NF_ACCEPT:
		return "accept"

	case NF_DROP:
		return "drop"

	case NF_STOLEN:
		return "stolen"

	case NF_QUEUE:
		return "queue"

	case NF_REPEAT:
		return "repeat"

	case NF_STOP:
		return "stop"

	case unix.NFT_RETURN:
		return "return"

	case unix.NFT_JUMP:
		return "jump"

	case unix.NFT_GOTO:
		return "goto"

	case unix.NFT_CONTINUE:
		return "continue"

	case unix.NFT_BREAK:
		return "break"
	}

	return "unknown"
}

func (f FamilyTable) String() string {
	switch f {
	case unix.NFPROTO_IPV4:
		return "ip"

	case unix.NFPROTO_IPV6:
		return "ip6"

	case unix.NFPROTO_INET:
		return "inet"

	case unix.NFPROTO_NETDEV:
		return "netdev"

	case unix.NFPROTO_ARP:
		return "arp"

	case unix.NFPROTO_BRIDGE:
		return "bridge"
	}

	return "unknown"
}

func (t TraceType) String() string {
	switch t {
	case unix.NFT_TRACETYPE_UNSPEC:
		return "unspec"
	case unix.NFT_TRACETYPE_POLICY:
		return "policy"
	case unix.NFT_TRACETYPE_RETURN:
		return "return"
	case unix.NFT_TRACETYPE_RULE:
		return "rule"
	}
	return "unknown"
}

func main() {
	// Name of the kernel function to trace.
	fn := "nft_trace_notify"
	// Subscribe to signals for terminating the program.
	stopper := make(chan os.Signal, 1)
	signal.Notify(stopper, os.Interrupt, syscall.SIGTERM)

	// Allow the current process to lock memory for eBPF resources.
	if err := rlimit.RemoveMemlock(); err != nil {
		log.Fatal(err)
	}

	// Load pre-compiled programs and maps into the kernel.
	objs := bpfObjects{}
	if err := loadBpfObjects(&objs, nil); err != nil {
		log.Fatalf("loading objects: %v", err)
	}
	defer objs.Close()

	// Open a Kprobe at the entry point of the kernel function and attach the
	// pre-compiled program. Each time the kernel function enters, the program
	// will emit an event containing pid and command of the execved task.
	kp, err := link.Kprobe(fn, objs.KprobeNftTraceNotify, nil)
	if err != nil {
		log.Fatalf("opening kprobe: %s", err)
	}
	defer kp.Close()

	// Open a ringbuf reader from userspace RINGBUF map described in the
	// eBPF C program.
	rd, err := ringbuf.NewReader(objs.Events)
	if err != nil {
		log.Fatalf("opening ringbuf reader: %s", err)
	}
	defer rd.Close()

	// Close the reader when the process receives a signal, which will exit
	// the read loop.
	go func() {
		<-stopper

		if err := rd.Close(); err != nil {
			log.Fatalf("closing ringbuf reader: %s", err)
		}
	}()

	log.Println("Waiting for events..")

	// bpfEvent is generated by bpf2go.
	var event bpfTraceInfo
	for {
		record, err := rd.Read()
		if err != nil {
			if errors.Is(err, ringbuf.ErrClosed) {
				log.Println("Received signal, exiting..")
				return
			}
			log.Printf("reading from reader: %s", err)
			continue
		}

		// Parse the ringbuf event entry into a bpfEvent structure.
		if err := binary.Read(bytes.NewBuffer(record.RawSample), binary.LittleEndian, &event); err != nil {
			log.Printf("parsing ringbuf event: %s", err)
			continue
		}

		log.Printf(
			"id: %d, type: %s, family: %s, tbl name: %s tbl handle: %d, chain name: %s, chain handle: %d, rule handle: %d, verdict: %s, "+
				"nfproto: %d, policy: %s, makr: %d, iif: %d, iif_type: %d, iif_name: %s, oif: %d, oif_type: %d, oif_name: %s,\n",
			event.Id,
			TraceType(event.Type),
			FamilyTable(event.Family),
			unix.ByteSliceToString(event.TableName[:]),
			event.TableHandle,
			unix.ByteSliceToString(event.ChainName[:]),
			event.ChainHandle,
			event.RuleHandle,
			Verdict(event.Verdict),
			event.Nfproto,
			Verdict(event.Policy),
			event.Mark,
			event.Iif,
			event.IifType,
			unix.ByteSliceToString(event.IifName[:]),
			event.Oif,
			event.OifType,
			unix.ByteSliceToString(event.OifName[:]),
		)
	}
}
